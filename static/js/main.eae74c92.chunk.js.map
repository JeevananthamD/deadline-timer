{"version":3,"sources":["components/InputField.js","components/SubmitButton.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","getInput","value","type","id","onChange","SubmitButton","submit","onClick","Timer","days","hours","minutes","seconds","className","App","e","setState","input","target","state","countDownDate","Date","getTime","endDate","toDateString","substring","length","calculate","now","count","alert","endTimer","timer","clearInterval","interval","setInterval","Math","floor","undefined","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eae74c92.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InputField = ({getInput, value}) => {\r\n    return(\r\n        <input type=\"date\" id=\"InputField\" onChange={getInput} value={value}/>\r\n    );\r\n}\r\n\r\nexport default InputField;","import React from \"react\";\r\n\r\nconst SubmitButton = ({submit}) => {\r\n    return(\r\n        <button id=\"SubmitButton\" onClick={submit}>Submit</button>\r\n    );\r\n}\r\n\r\nexport default SubmitButton;","import React from \"react\";\r\n\r\nconst Timer = ({days, hours,minutes,seconds}) => {\r\n    return(\r\n        <div id=\"Timer\">\r\n            <div><p className=\"time\">{days}</p><p className=\"units\">Days</p></div>\r\n            <div className=\"colon\">:</div>\r\n            <div><p className=\"time\">{hours}</p><p className=\"units\">Hours</p></div>\r\n            <div className=\"colon\">:</div>\r\n            <div><p className=\"time\">{minutes}</p><p className=\"units\">Minutes</p></div>\r\n            <div className=\"colon\">:</div>\r\n            <div><p className=\"time\">{seconds}</p><p className=\"units\">Seconds</p></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React,{ Component } from 'react';\nimport './App.css';\nimport InputField from './components/InputField';\nimport SubmitButton from './components/SubmitButton';\nimport Timer from './components/Timer';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    // this.input = \"\";\n    this.countDownDate = 0;\n    this.interval = undefined;\n    this.endDate = \"\";\n    this.state = {\n      input: \"\",\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    }\n  }\n\n  getInput = (e) => {\n    this.setState({input: e.target.value});\n  }\n\n  submit = () => {\n    if(this.state.input!==\"\") {\n      this.countDownDate = new Date(this.state.input).getTime();\n      this.endDate = new Date(this.state.input).toDateString();\n      this.endDate = this.endDate.substring(4,10) + \",\" + this.endDate.substring(10, this.endDate.length);\n      this.setState({input: \"\"});\n      this.calculate();\n    }\n  }\n\n  calculate = () => {\n    let now = new Date().getTime();\n    let utc_ist_difference = 19800000;\n    let count = this.countDownDate - now - utc_ist_difference;\n    if(count<0) {\n      alert(\"Please choose future date\");\n      this.endDate = \"\";\n      this.setState({days: 0, hours: 0, minutes: 0, seconds: 0}, () => this.endTimer());\n    }\n    else {\n      this.timer(count);\n    }\n  }\n\n  timer = (count) => {\n      clearInterval(this.interval);\n      this.interval = setInterval(() => {\n      count -= 1000;\n      let days = Math.floor(count / (24*60*60*1000));\n      let hours = Math.floor((count % (24*60*60*1000)) / (60*60*1000));\n      let minutes = Math.floor((count % (60*60*1000)) / (60*1000));\n      let seconds = Math.floor((count % (60*1000)) / (1000));\n      this.setState({days: days, hours: hours, minutes: minutes, seconds: seconds}, () => this.endTimer());\n    }, 1000);\n  }\n\n  endTimer = () => {\n    let {days, hours, minutes, seconds} = this.state;\n    let sum = days + hours + minutes + seconds;\n    if(!sum) {\n      clearInterval(this.interval);\n    }\n  }\n\n  render() {\n    let {days, hours, minutes, seconds} = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Timer ends on {this.endDate}</h1>\n        <Timer days={days} hours={hours} minutes={minutes} seconds={seconds}/>\n        <div id=\"buttons\">\n          <InputField getInput={this.getInput} value={this.state.input}/>\n          <SubmitButton submit={this.submit}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}